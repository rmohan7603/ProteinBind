import { Conversation, Client, DecodedMessage, ClientOptions } from '@xmtp/mls-client';
import { Conversation as Conversation$1, Client as Client$1, DecodedMessage as DecodedMessage$1 } from '@xmtp/xmtp-js';

declare class HandlerContext {
    private refConv;
    message: MessageAbstracted;
    group: Conversation;
    conversation: Conversation$1;
    client: Client;
    v2client: Client$1;
    commands?: CommandGroup[];
    members?: User[];
    commandHandlers?: CommandHandlers;
    agentHandlers?: AgentHandlers;
    getMessageById: (id: string) => DecodedMessage | null;
    private constructor();
    static create(conversation: Conversation | Conversation$1, message: DecodedMessage | DecodedMessage$1, { client, v2client }: {
        client: Client;
        v2client: Client$1;
    }, commands?: CommandGroup[], commandHandlers?: CommandHandlers, agentHandlers?: AgentHandlers): Promise<HandlerContext>;
    reply(message: string): Promise<void>;
    send(message: string): Promise<void>;
    isConversationV2(conversation: any): conversation is Conversation$1;
    react(emoji: string): Promise<void>;
    sendTo(message: string, receivers: string[]): Promise<void>;
    intent(text: string, conversation?: Conversation): Promise<void>;
}

type AgentHandlers = {
    [key: string]: (context: HandlerContext) => Promise<void>;
};
type MessageAbstracted = {
    id: string;
    sent: Date;
    content: any;
    sender: {
        inboxId: string;
        username: string;
        address: string;
        accountAddresses: string[];
    };
    typeId: string;
};
type CommandHandler = (context: HandlerContext) => Promise<void>;
type CommandHandlers = {
    [command: string]: CommandHandler;
};
type Handler = (context: HandlerContext) => Promise<void>;
type Config = {
    commands?: CommandGroup[];
    client?: ClientOptions;
    accessHandler?: AccessHandler;
    commandHandlers?: CommandHandlers;
    agentHandlers?: AgentHandlers;
};
interface CommandParamConfig {
    default?: any;
    type: "number" | "string" | "username" | "quoted" | "address";
    values?: string[];
}
interface CommandConfig {
    command: string;
    description: string;
    params: Record<string, CommandParamConfig>;
}
interface CommandGroup {
    name: string;
    icon: string;
    description: string;
    commands: CommandConfig[];
}
interface User {
    inboxId: string;
    username: string;
    address: string;
    accountAddresses: string[];
    installationIds: string[];
    fake?: boolean;
}
type MetadataValue = string | number | boolean;
type Metadata = Record<string, MetadataValue | MetadataValue[]>;
type AccessHandler = (context: HandlerContext) => Promise<boolean>;

declare function run(handler: Handler, config?: Config): Promise<void>;

declare function xmtpClient(clientConfig?: ClientOptions, privateKey?: string | null): Promise<{
    client: Client;
    v2client: Client$1;
}>;

export { type AccessHandler, type AgentHandlers, type CommandConfig, type CommandGroup, type CommandHandler, type CommandHandlers, type CommandParamConfig, type Config, type Handler, HandlerContext, type MessageAbstracted, type Metadata, type MetadataValue, type User, run, xmtpClient };
